<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="405.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="16202"><g><title>primegen`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (8 samples, 0.05%)</title><rect x="0.2592%" y="149" width="0.0494%" height="15" fill="rgb(227,0,7)" fg:x="42" fg:w="8"/><text x="0.5092%" y="159.50"></text></g><g><title>primegen`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (70 samples, 0.43%)</title><rect x="0.1666%" y="165" width="0.4320%" height="15" fill="rgb(217,0,24)" fg:x="27" fg:w="70"/><text x="0.4166%" y="175.50"></text></g><g><title>primegen`core::slice::raw::from_raw_parts::precondition_check (47 samples, 0.29%)</title><rect x="0.3086%" y="149" width="0.2901%" height="15" fill="rgb(221,193,54)" fg:x="50" fg:w="47"/><text x="0.5586%" y="159.50"></text></g><g><title>primegen`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (4 samples, 0.02%)</title><rect x="0.6296%" y="149" width="0.0247%" height="15" fill="rgb(248,212,6)" fg:x="102" fg:w="4"/><text x="0.8796%" y="159.50"></text></g><g><title>primegen`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (27 samples, 0.17%)</title><rect x="0.5987%" y="165" width="0.1666%" height="15" fill="rgb(208,68,35)" fg:x="97" fg:w="27"/><text x="0.8487%" y="175.50"></text></g><g><title>primegen`core::slice::raw::from_raw_parts_mut::precondition_check (18 samples, 0.11%)</title><rect x="0.6542%" y="149" width="0.1111%" height="15" fill="rgb(232,128,0)" fg:x="106" fg:w="18"/><text x="0.9042%" y="159.50"></text></g><g><title>primegen`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.01%)</title><rect x="0.7653%" y="165" width="0.0123%" height="15" fill="rgb(207,160,47)" fg:x="124" fg:w="2"/><text x="1.0153%" y="175.50"></text></g><g><title>primegen`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.01%)</title><rect x="0.7777%" y="165" width="0.0123%" height="15" fill="rgb(228,23,34)" fg:x="126" fg:w="2"/><text x="1.0277%" y="175.50"></text></g><g><title>primegen`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (23 samples, 0.14%)</title><rect x="0.7962%" y="165" width="0.1420%" height="15" fill="rgb(218,30,26)" fg:x="129" fg:w="23"/><text x="1.0462%" y="175.50"></text></g><g><title>primegen`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (22 samples, 0.14%)</title><rect x="0.8024%" y="149" width="0.1358%" height="15" fill="rgb(220,122,19)" fg:x="130" fg:w="22"/><text x="1.0524%" y="159.50"></text></g><g><title>primegen`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (9 samples, 0.06%)</title><rect x="0.8826%" y="133" width="0.0555%" height="15" fill="rgb(250,228,42)" fg:x="143" fg:w="9"/><text x="1.1326%" y="143.50"></text></g><g><title>primegen`core::num::_&lt;impl usize&gt;::unchecked_add::precondition_check (4 samples, 0.02%)</title><rect x="0.9135%" y="117" width="0.0247%" height="15" fill="rgb(240,193,28)" fg:x="148" fg:w="4"/><text x="1.1635%" y="127.50"></text></g><g><title>primegen`&lt;&amp;primegen::bigint::BigInt as core::ops::arith::Mul&gt;::mul (155 samples, 0.96%)</title><rect x="0.0000%" y="181" width="0.9567%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="155"/><text x="0.2500%" y="191.50"></text></g><g><title>primegen`core::slice::raw::from_raw_parts_mut::precondition_check (2 samples, 0.01%)</title><rect x="0.9443%" y="165" width="0.0123%" height="15" fill="rgb(206,188,39)" fg:x="153" fg:w="2"/><text x="1.1943%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (97 samples, 0.60%)</title><rect x="2.4503%" y="165" width="0.5987%" height="15" fill="rgb(217,207,13)" fg:x="397" fg:w="97"/><text x="2.7003%" y="175.50"></text></g><g><title>primegen`alloc::vec::Vec&lt;T,A&gt;::as_slice (1,154 samples, 7.12%)</title><rect x="11.0480%" y="133" width="7.1226%" height="15" fill="rgb(231,73,38)" fg:x="1790" fg:w="1154"/><text x="11.2980%" y="143.50">primegen`a..</text></g><g><title>primegen`core::slice::raw::from_raw_parts::precondition_check (803 samples, 4.96%)</title><rect x="13.2144%" y="117" width="4.9562%" height="15" fill="rgb(225,20,46)" fg:x="2141" fg:w="803"/><text x="13.4644%" y="127.50">primeg..</text></g><g><title>primegen`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1,276 samples, 7.88%)</title><rect x="10.7086%" y="149" width="7.8756%" height="15" fill="rgb(210,31,41)" fg:x="1735" fg:w="1276"/><text x="10.9586%" y="159.50">primegen`&lt;a..</text></g><g><title>primegen`core::slice::raw::from_raw_parts::precondition_check (67 samples, 0.41%)</title><rect x="18.1706%" y="133" width="0.4135%" height="15" fill="rgb(221,200,47)" fg:x="2944" fg:w="67"/><text x="18.4206%" y="143.50"></text></g><g><title>primegen`&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (752 samples, 4.64%)</title><rect x="18.5841%" y="149" width="4.6414%" height="15" fill="rgb(226,26,5)" fg:x="3011" fg:w="752"/><text x="18.8341%" y="159.50">prime..</text></g><g><title>primegen`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (824 samples, 5.09%)</title><rect x="23.2255%" y="149" width="5.0858%" height="15" fill="rgb(249,33,26)" fg:x="3763" fg:w="824"/><text x="23.4755%" y="159.50">primeg..</text></g><g><title>primegen`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (274 samples, 1.69%)</title><rect x="28.3113%" y="149" width="1.6911%" height="15" fill="rgb(235,183,28)" fg:x="4587" fg:w="274"/><text x="28.5613%" y="159.50"></text></g><g><title>primegen`alloc::vec::Vec&lt;T,A&gt;::as_slice (21 samples, 0.13%)</title><rect x="30.0025%" y="149" width="0.1296%" height="15" fill="rgb(221,5,38)" fg:x="4861" fg:w="21"/><text x="30.2525%" y="159.50"></text></g><g><title>primegen`alloc::vec::Vec&lt;T,A&gt;::pop (2 samples, 0.01%)</title><rect x="30.1321%" y="149" width="0.0123%" height="15" fill="rgb(247,18,42)" fg:x="4882" fg:w="2"/><text x="30.3821%" y="159.50"></text></g><g><title>primegen`alloc::vec::Vec&lt;T,A&gt;::push (789 samples, 4.87%)</title><rect x="30.1444%" y="149" width="4.8698%" height="15" fill="rgb(241,131,45)" fg:x="4884" fg:w="789"/><text x="30.3944%" y="159.50">primeg..</text></g><g><title>primegen`alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (11 samples, 0.07%)</title><rect x="35.0759%" y="133" width="0.0679%" height="15" fill="rgb(249,31,29)" fg:x="5683" fg:w="11"/><text x="35.3259%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (30 samples, 0.19%)</title><rect x="35.6623%" y="117" width="0.1852%" height="15" fill="rgb(225,111,53)" fg:x="5778" fg:w="30"/><text x="35.9123%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (6 samples, 0.04%)</title><rect x="35.8474%" y="117" width="0.0370%" height="15" fill="rgb(238,160,17)" fg:x="5808" fg:w="6"/><text x="36.0974%" y="127.50"></text></g><g><title>primegen`DYLD-STUB$$malloc (4 samples, 0.02%)</title><rect x="35.8845%" y="117" width="0.0247%" height="15" fill="rgb(214,148,48)" fg:x="5814" fg:w="4"/><text x="36.1345%" y="127.50"></text></g><g><title>primegen`__rdl_alloc (6 samples, 0.04%)</title><rect x="35.9091%" y="117" width="0.0370%" height="15" fill="rgb(232,36,49)" fg:x="5818" fg:w="6"/><text x="36.1591%" y="127.50"></text></g><g><title>primegen`alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (62 samples, 0.38%)</title><rect x="35.9462%" y="117" width="0.3827%" height="15" fill="rgb(209,103,24)" fg:x="5824" fg:w="62"/><text x="36.1962%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (38 samples, 0.23%)</title><rect x="36.0943%" y="101" width="0.2345%" height="15" fill="rgb(229,88,8)" fg:x="5848" fg:w="38"/><text x="36.3443%" y="111.50"></text></g><g><title>primegen`alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (212 samples, 1.31%)</title><rect x="35.1438%" y="133" width="1.3085%" height="15" fill="rgb(213,181,19)" fg:x="5694" fg:w="212"/><text x="35.3938%" y="143.50"></text></g><g><title>primegen`core::hint::assert_unchecked::precondition_check (20 samples, 0.12%)</title><rect x="36.3288%" y="117" width="0.1234%" height="15" fill="rgb(254,191,54)" fg:x="5886" fg:w="20"/><text x="36.5788%" y="127.50"></text></g><g><title>primegen`alloc::vec::Vec&lt;T&gt;::with_capacity (239 samples, 1.48%)</title><rect x="35.0142%" y="149" width="1.4751%" height="15" fill="rgb(241,83,37)" fg:x="5673" fg:w="239"/><text x="35.2642%" y="159.50"></text></g><g><title>primegen`core::hint::assert_unchecked::precondition_check (6 samples, 0.04%)</title><rect x="36.4523%" y="133" width="0.0370%" height="15" fill="rgb(233,36,39)" fg:x="5906" fg:w="6"/><text x="36.7023%" y="143.50"></text></g><g><title>primegen`&lt;primegen::bigint::BigInt as core::cmp::PartialOrd&gt;::partial_cmp (8 samples, 0.05%)</title><rect x="36.5202%" y="133" width="0.0494%" height="15" fill="rgb(226,3,54)" fg:x="5917" fg:w="8"/><text x="36.7702%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (51 samples, 0.31%)</title><rect x="36.6992%" y="117" width="0.3148%" height="15" fill="rgb(245,192,40)" fg:x="5946" fg:w="51"/><text x="36.9492%" y="127.50"></text></g><g><title>primegen`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="37.0139%" y="117" width="0.0185%" height="15" fill="rgb(238,167,29)" fg:x="5997" fg:w="3"/><text x="37.2639%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (54 samples, 0.33%)</title><rect x="37.4769%" y="101" width="0.3333%" height="15" fill="rgb(232,182,51)" fg:x="6072" fg:w="54"/><text x="37.7269%" y="111.50"></text></g><g><title>primegen`&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (44 samples, 0.27%)</title><rect x="37.8101%" y="101" width="0.2716%" height="15" fill="rgb(231,60,39)" fg:x="6126" fg:w="44"/><text x="38.0601%" y="111.50"></text></g><g><title>primegen`alloc::vec::Vec&lt;T,A&gt;::as_slice (165 samples, 1.02%)</title><rect x="38.1002%" y="85" width="1.0184%" height="15" fill="rgb(208,69,12)" fg:x="6173" fg:w="165"/><text x="38.3502%" y="95.50"></text></g><g><title>primegen`core::slice::raw::from_raw_parts::precondition_check (117 samples, 0.72%)</title><rect x="38.3965%" y="69" width="0.7221%" height="15" fill="rgb(235,93,37)" fg:x="6221" fg:w="117"/><text x="38.6465%" y="79.50"></text></g><g><title>primegen`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (174 samples, 1.07%)</title><rect x="38.0817%" y="101" width="1.0739%" height="15" fill="rgb(213,116,39)" fg:x="6170" fg:w="174"/><text x="38.3317%" y="111.50"></text></g><g><title>primegen`core::slice::raw::from_raw_parts::precondition_check (6 samples, 0.04%)</title><rect x="39.1186%" y="85" width="0.0370%" height="15" fill="rgb(222,207,29)" fg:x="6338" fg:w="6"/><text x="39.3686%" y="95.50"></text></g><g><title>primegen`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (16 samples, 0.10%)</title><rect x="39.1557%" y="101" width="0.0988%" height="15" fill="rgb(206,96,30)" fg:x="6344" fg:w="16"/><text x="39.4057%" y="111.50"></text></g><g><title>primegen`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (5 samples, 0.03%)</title><rect x="39.2544%" y="101" width="0.0309%" height="15" fill="rgb(218,138,4)" fg:x="6360" fg:w="5"/><text x="39.5044%" y="111.50"></text></g><g><title>primegen`&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.07%)</title><rect x="39.2976%" y="85" width="0.0679%" height="15" fill="rgb(250,191,14)" fg:x="6367" fg:w="11"/><text x="39.5476%" y="95.50"></text></g><g><title>primegen`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (137 samples, 0.85%)</title><rect x="39.7173%" y="53" width="0.8456%" height="15" fill="rgb(239,60,40)" fg:x="6435" fg:w="137"/><text x="39.9673%" y="63.50"></text></g><g><title>primegen`core::num::_&lt;impl isize&gt;::unchecked_neg::precondition_check (18 samples, 0.11%)</title><rect x="40.4518%" y="37" width="0.1111%" height="15" fill="rgb(206,27,48)" fg:x="6554" fg:w="18"/><text x="40.7018%" y="47.50"></text></g><g><title>primegen`&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (147 samples, 0.91%)</title><rect x="39.6988%" y="69" width="0.9073%" height="15" fill="rgb(225,35,8)" fg:x="6432" fg:w="147"/><text x="39.9488%" y="79.50"></text></g><g><title>primegen`core::num::_&lt;impl isize&gt;::unchecked_neg::precondition_check (7 samples, 0.04%)</title><rect x="40.5629%" y="53" width="0.0432%" height="15" fill="rgb(250,213,24)" fg:x="6572" fg:w="7"/><text x="40.8129%" y="63.50"></text></g><g><title>primegen`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (222 samples, 1.37%)</title><rect x="39.2853%" y="101" width="1.3702%" height="15" fill="rgb(247,123,22)" fg:x="6365" fg:w="222"/><text x="39.5353%" y="111.50"></text></g><g><title>primegen`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (209 samples, 1.29%)</title><rect x="39.3655%" y="85" width="1.2900%" height="15" fill="rgb(231,138,38)" fg:x="6378" fg:w="209"/><text x="39.6155%" y="95.50"></text></g><g><title>primegen`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (8 samples, 0.05%)</title><rect x="40.6061%" y="69" width="0.0494%" height="15" fill="rgb(231,145,46)" fg:x="6579" fg:w="8"/><text x="40.8561%" y="79.50"></text></g><g><title>primegen`DYLD-STUB$$memcpy (10 samples, 0.06%)</title><rect x="40.6555%" y="101" width="0.0617%" height="15" fill="rgb(251,118,11)" fg:x="6587" fg:w="10"/><text x="40.9055%" y="111.50"></text></g><g><title>primegen`alloc::vec::Vec&lt;T,A&gt;::as_slice (2 samples, 0.01%)</title><rect x="40.7172%" y="101" width="0.0123%" height="15" fill="rgb(217,147,25)" fg:x="6597" fg:w="2"/><text x="40.9672%" y="111.50"></text></g><g><title>primegen`core::iter::traits::iterator::Iterator::zip (24 samples, 0.15%)</title><rect x="40.7295%" y="101" width="0.1481%" height="15" fill="rgb(247,81,37)" fg:x="6599" fg:w="24"/><text x="40.9795%" y="111.50"></text></g><g><title>primegen`core::slice::_&lt;impl [T]&gt;::iter (5 samples, 0.03%)</title><rect x="40.8777%" y="101" width="0.0309%" height="15" fill="rgb(209,12,38)" fg:x="6623" fg:w="5"/><text x="41.1277%" y="111.50"></text></g><g><title>primegen`&lt;primegen::bigint::BigInt as core::cmp::PartialOrd&gt;::partial_cmp (697 samples, 4.30%)</title><rect x="37.0325%" y="117" width="4.3019%" height="15" fill="rgb(227,1,9)" fg:x="6000" fg:w="697"/><text x="37.2825%" y="127.50">prime..</text></g><g><title>primegen`core::slice::iter::Iter&lt;T&gt;::new (69 samples, 0.43%)</title><rect x="40.9085%" y="101" width="0.4259%" height="15" fill="rgb(248,47,43)" fg:x="6628" fg:w="69"/><text x="41.1585%" y="111.50"></text></g><g><title>primegen`DYLD-STUB$$memcpy (9 samples, 0.06%)</title><rect x="41.3344%" y="117" width="0.0555%" height="15" fill="rgb(221,10,30)" fg:x="6697" fg:w="9"/><text x="41.5844%" y="127.50"></text></g><g><title>primegen`alloc::vec::Vec&lt;T,A&gt;::len (20 samples, 0.12%)</title><rect x="41.3900%" y="117" width="0.1234%" height="15" fill="rgb(210,229,1)" fg:x="6706" fg:w="20"/><text x="41.6400%" y="127.50"></text></g><g><title>primegen`core::cmp::impls::_&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::gt (24 samples, 0.15%)</title><rect x="41.5134%" y="117" width="0.1481%" height="15" fill="rgb(222,148,37)" fg:x="6726" fg:w="24"/><text x="41.7634%" y="127.50"></text></g><g><title>primegen`core::cmp::impls::_&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (56 samples, 0.35%)</title><rect x="41.6615%" y="117" width="0.3456%" height="15" fill="rgb(234,67,33)" fg:x="6750" fg:w="56"/><text x="41.9115%" y="127.50"></text></g><g><title>primegen`core::cmp::impls::_&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (911 samples, 5.62%)</title><rect x="36.4893%" y="149" width="5.6228%" height="15" fill="rgb(247,98,35)" fg:x="5912" fg:w="911"/><text x="36.7393%" y="159.50">primege..</text></g><g><title>primegen`core::cmp::PartialOrd::ge (898 samples, 5.54%)</title><rect x="36.5696%" y="133" width="5.5425%" height="15" fill="rgb(247,138,52)" fg:x="5925" fg:w="898"/><text x="36.8196%" y="143.50">primege..</text></g><g><title>primegen`core::iter::traits::iterator::Iterator::rev (17 samples, 0.10%)</title><rect x="42.0072%" y="117" width="0.1049%" height="15" fill="rgb(213,79,30)" fg:x="6806" fg:w="17"/><text x="42.2572%" y="127.50"></text></g><g><title>primegen`core::slice::_&lt;impl [T]&gt;::get (108 samples, 0.67%)</title><rect x="42.1121%" y="149" width="0.6666%" height="15" fill="rgb(246,177,23)" fg:x="6823" fg:w="108"/><text x="42.3621%" y="159.50"></text></g><g><title>primegen`core::slice::_&lt;impl [T]&gt;::iter (2 samples, 0.01%)</title><rect x="42.7787%" y="149" width="0.0123%" height="15" fill="rgb(230,62,27)" fg:x="6931" fg:w="2"/><text x="43.0287%" y="159.50"></text></g><g><title>primegen`&lt;&amp;primegen::bigint::BigInt as core::ops::arith::Sub&lt;&amp;primegen::bigint::BigInt&gt;&gt;::sub (6,467 samples, 39.91%)</title><rect x="3.0490%" y="165" width="39.9148%" height="15" fill="rgb(216,154,8)" fg:x="494" fg:w="6467"/><text x="3.2990%" y="175.50">primegen`&lt;&amp;primegen::bigint::BigInt as core::ops::arith::Sub&lt;&amp;pri..</text></g><g><title>primegen`core::slice::iter::Iter&lt;T&gt;::new (28 samples, 0.17%)</title><rect x="42.7910%" y="149" width="0.1728%" height="15" fill="rgb(244,35,45)" fg:x="6933" fg:w="28"/><text x="43.0410%" y="159.50"></text></g><g><title>primegen`&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (287 samples, 1.77%)</title><rect x="47.8398%" y="149" width="1.7714%" height="15" fill="rgb(251,115,12)" fg:x="7751" fg:w="287"/><text x="48.0898%" y="159.50">p..</text></g><g><title>primegen`core::slice::raw::from_raw_parts::precondition_check (123 samples, 0.76%)</title><rect x="48.8520%" y="133" width="0.7592%" height="15" fill="rgb(240,54,50)" fg:x="7915" fg:w="123"/><text x="49.1020%" y="143.50"></text></g><g><title>primegen`&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (5 samples, 0.03%)</title><rect x="49.6112%" y="149" width="0.0309%" height="15" fill="rgb(233,84,52)" fg:x="8038" fg:w="5"/><text x="49.8612%" y="159.50"></text></g><g><title>primegen`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (16 samples, 0.10%)</title><rect x="49.6420%" y="149" width="0.0988%" height="15" fill="rgb(207,117,47)" fg:x="8043" fg:w="16"/><text x="49.8920%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.05%)</title><rect x="56.3572%" y="101" width="0.0494%" height="15" fill="rgb(249,43,39)" fg:x="9131" fg:w="8"/><text x="56.6072%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (66 samples, 0.41%)</title><rect x="56.4066%" y="101" width="0.4074%" height="15" fill="rgb(209,38,44)" fg:x="9139" fg:w="66"/><text x="56.6566%" y="111.50"></text></g><g><title>primegen`DYLD-STUB$$realloc (19 samples, 0.12%)</title><rect x="56.8201%" y="101" width="0.1173%" height="15" fill="rgb(236,212,23)" fg:x="9206" fg:w="19"/><text x="57.0701%" y="111.50"></text></g><g><title>primegen`__rdl_realloc (20 samples, 0.12%)</title><rect x="56.9374%" y="101" width="0.1234%" height="15" fill="rgb(242,79,21)" fg:x="9225" fg:w="20"/><text x="57.1874%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (23 samples, 0.14%)</title><rect x="57.7892%" y="85" width="0.1420%" height="15" fill="rgb(211,96,35)" fg:x="9363" fg:w="23"/><text x="58.0392%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (22 samples, 0.14%)</title><rect x="59.1594%" y="53" width="0.1358%" height="15" fill="rgb(253,215,40)" fg:x="9585" fg:w="22"/><text x="59.4094%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (72 samples, 0.44%)</title><rect x="59.2951%" y="53" width="0.4444%" height="15" fill="rgb(211,81,21)" fg:x="9607" fg:w="72"/><text x="59.5451%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (191 samples, 1.18%)</title><rect x="59.7395%" y="53" width="1.1789%" height="15" fill="rgb(208,190,38)" fg:x="9679" fg:w="191"/><text x="59.9895%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (17 samples, 0.10%)</title><rect x="61.3381%" y="37" width="0.1049%" height="15" fill="rgb(235,213,38)" fg:x="9938" fg:w="17"/><text x="61.5881%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (290 samples, 1.79%)</title><rect x="61.4430%" y="37" width="1.7899%" height="15" fill="rgb(237,122,38)" fg:x="9955" fg:w="290"/><text x="61.6930%" y="47.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (179 samples, 1.10%)</title><rect x="63.2329%" y="37" width="1.1048%" height="15" fill="rgb(244,218,35)" fg:x="10245" fg:w="179"/><text x="63.4829%" y="47.50"></text></g><g><title>libsystem_platform.dylib`__bzero (7 samples, 0.04%)</title><rect x="64.3377%" y="37" width="0.0432%" height="15" fill="rgb(240,68,47)" fg:x="10424" fg:w="7"/><text x="64.5877%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (639 samples, 3.94%)</title><rect x="60.9184%" y="53" width="3.9440%" height="15" fill="rgb(210,16,53)" fg:x="9870" fg:w="639"/><text x="61.1684%" y="63.50">libs..</text></g><g><title>libsystem_platform.dylib`_platform_memset (78 samples, 0.48%)</title><rect x="64.3809%" y="37" width="0.4814%" height="15" fill="rgb(235,124,12)" fg:x="10431" fg:w="78"/><text x="64.6309%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1,124 samples, 6.94%)</title><rect x="58.5175%" y="69" width="6.9374%" height="15" fill="rgb(224,169,11)" fg:x="9481" fg:w="1124"/><text x="58.7675%" y="79.50">libsystem..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (96 samples, 0.59%)</title><rect x="64.8624%" y="53" width="0.5925%" height="15" fill="rgb(250,166,2)" fg:x="10509" fg:w="96"/><text x="65.1124%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (24 samples, 0.15%)</title><rect x="65.4549%" y="69" width="0.1481%" height="15" fill="rgb(242,216,29)" fg:x="10605" fg:w="24"/><text x="65.7049%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1,287 samples, 7.94%)</title><rect x="57.9311%" y="85" width="7.9435%" height="15" fill="rgb(230,116,27)" fg:x="9386" fg:w="1287"/><text x="58.1811%" y="95.50">libsystem_m..</text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (44 samples, 0.27%)</title><rect x="65.6030%" y="69" width="0.2716%" height="15" fill="rgb(228,99,48)" fg:x="10629" fg:w="44"/><text x="65.8530%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (7 samples, 0.04%)</title><rect x="65.8746%" y="85" width="0.0432%" height="15" fill="rgb(253,11,6)" fg:x="10673" fg:w="7"/><text x="66.1246%" y="95.50"></text></g><g><title>primegen`alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1,816 samples, 11.21%)</title><rect x="55.5364%" y="117" width="11.2085%" height="15" fill="rgb(247,143,39)" fg:x="8998" fg:w="1816"/><text x="55.7864%" y="127.50">primegen`alloc::..</text></g><g><title>primegen`alloc::raw_vec::finish_grow (1,568 samples, 9.68%)</title><rect x="57.0670%" y="101" width="9.6778%" height="15" fill="rgb(236,97,10)" fg:x="9246" fg:w="1568"/><text x="57.3170%" y="111.50">primegen`alloc..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (134 samples, 0.83%)</title><rect x="65.9178%" y="85" width="0.8271%" height="15" fill="rgb(233,208,19)" fg:x="10680" fg:w="134"/><text x="66.1678%" y="95.50"></text></g><g><title>primegen`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1,925 samples, 11.88%)</title><rect x="55.0426%" y="133" width="11.8812%" height="15" fill="rgb(216,164,2)" fg:x="8918" fg:w="1925"/><text x="55.2926%" y="143.50">primegen`alloc::ra..</text></g><g><title>primegen`alloc::raw_vec::finish_grow (29 samples, 0.18%)</title><rect x="66.7448%" y="117" width="0.1790%" height="15" fill="rgb(220,129,5)" fg:x="10814" fg:w="29"/><text x="66.9948%" y="127.50"></text></g><g><title>primegen`alloc::vec::Vec&lt;T,A&gt;::push (2,863 samples, 17.67%)</title><rect x="49.7408%" y="149" width="17.6707%" height="15" fill="rgb(242,17,10)" fg:x="8059" fg:w="2863"/><text x="49.9908%" y="159.50">primegen`alloc::vec::Vec&lt;T,..</text></g><g><title>primegen`alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (79 samples, 0.49%)</title><rect x="66.9238%" y="133" width="0.4876%" height="15" fill="rgb(242,107,0)" fg:x="10843" fg:w="79"/><text x="67.1738%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (44 samples, 0.27%)</title><rect x="68.3187%" y="117" width="0.2716%" height="15" fill="rgb(251,28,31)" fg:x="11069" fg:w="44"/><text x="68.5687%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc_type (4 samples, 0.02%)</title><rect x="68.5965%" y="117" width="0.0247%" height="15" fill="rgb(233,223,10)" fg:x="11114" fg:w="4"/><text x="68.8465%" y="127.50"></text></g><g><title>primegen`DYLD-STUB$$calloc (4 samples, 0.02%)</title><rect x="68.6212%" y="117" width="0.0247%" height="15" fill="rgb(215,21,27)" fg:x="11118" fg:w="4"/><text x="68.8712%" y="127.50"></text></g><g><title>primegen`__rdl_alloc_zeroed (8 samples, 0.05%)</title><rect x="68.6458%" y="117" width="0.0494%" height="15" fill="rgb(232,23,21)" fg:x="11122" fg:w="8"/><text x="68.8958%" y="127.50"></text></g><g><title>primegen`&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (324 samples, 2.00%)</title><rect x="67.4917%" y="133" width="1.9998%" height="15" fill="rgb(244,5,23)" fg:x="10935" fg:w="324"/><text x="67.7417%" y="143.50">p..</text></g><g><title>primegen`alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (129 samples, 0.80%)</title><rect x="68.6952%" y="117" width="0.7962%" height="15" fill="rgb(226,81,46)" fg:x="11130" fg:w="129"/><text x="68.9452%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc_type (85 samples, 0.52%)</title><rect x="68.9668%" y="101" width="0.5246%" height="15" fill="rgb(247,70,30)" fg:x="11174" fg:w="85"/><text x="69.2168%" y="111.50"></text></g><g><title>primegen`&lt;u64 as alloc::vec::is_zero::IsZero&gt;::is_zero (125 samples, 0.77%)</title><rect x="69.4914%" y="133" width="0.7715%" height="15" fill="rgb(212,68,19)" fg:x="11259" fg:w="125"/><text x="69.7414%" y="143.50"></text></g><g><title>primegen`alloc::vec::from_elem (483 samples, 2.98%)</title><rect x="67.4114%" y="149" width="2.9811%" height="15" fill="rgb(240,187,13)" fg:x="10922" fg:w="483"/><text x="67.6614%" y="159.50">pri..</text></g><g><title>primegen`alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (21 samples, 0.13%)</title><rect x="70.2629%" y="133" width="0.1296%" height="15" fill="rgb(223,113,26)" fg:x="11384" fg:w="21"/><text x="70.5129%" y="143.50"></text></g><g><title>primegen`&lt;&amp;primegen::bigint::BigInt as core::ops::bit::Shl&lt;usize&gt;&gt;::shl (4,454 samples, 27.49%)</title><rect x="42.9638%" y="165" width="27.4904%" height="15" fill="rgb(206,192,2)" fg:x="6961" fg:w="4454"/><text x="43.2138%" y="175.50">primegen`&lt;&amp;primegen::bigint::BigInt as core:..</text></g><g><title>primegen`core::slice::raw::from_raw_parts::precondition_check (10 samples, 0.06%)</title><rect x="70.3925%" y="149" width="0.0617%" height="15" fill="rgb(241,108,4)" fg:x="11405" fg:w="10"/><text x="70.6425%" y="159.50"></text></g><g><title>primegen`&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (56 samples, 0.35%)</title><rect x="70.4543%" y="165" width="0.3456%" height="15" fill="rgb(247,173,49)" fg:x="11415" fg:w="56"/><text x="70.7043%" y="175.50"></text></g><g><title>primegen`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (38 samples, 0.23%)</title><rect x="70.7999%" y="165" width="0.2345%" height="15" fill="rgb(224,114,35)" fg:x="11471" fg:w="38"/><text x="71.0499%" y="175.50"></text></g><g><title>primegen`&lt;core::cmp::Ordering as core::cmp::PartialEq&gt;::eq (42 samples, 0.26%)</title><rect x="71.0344%" y="165" width="0.2592%" height="15" fill="rgb(245,159,27)" fg:x="11509" fg:w="42"/><text x="71.2844%" y="175.50"></text></g><g><title>primegen`&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (58 samples, 0.36%)</title><rect x="71.2937%" y="165" width="0.3580%" height="15" fill="rgb(245,172,44)" fg:x="11551" fg:w="58"/><text x="71.5437%" y="175.50"></text></g><g><title>primegen`&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_next_back (4 samples, 0.02%)</title><rect x="71.7381%" y="149" width="0.0247%" height="15" fill="rgb(236,23,11)" fg:x="11623" fg:w="4"/><text x="71.9881%" y="159.50"></text></g><g><title>primegen`&lt;usize as core::iter::range::Step&gt;::backward_unchecked (130 samples, 0.80%)</title><rect x="72.3306%" y="117" width="0.8024%" height="15" fill="rgb(205,117,38)" fg:x="11719" fg:w="130"/><text x="72.5806%" y="127.50"></text></g><g><title>primegen`core::num::_&lt;impl usize&gt;::unchecked_sub::precondition_check (33 samples, 0.20%)</title><rect x="72.9293%" y="101" width="0.2037%" height="15" fill="rgb(237,72,25)" fg:x="11816" fg:w="33"/><text x="73.1793%" y="111.50"></text></g><g><title>primegen`&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (243 samples, 1.50%)</title><rect x="71.6516%" y="165" width="1.4998%" height="15" fill="rgb(244,70,9)" fg:x="11609" fg:w="243"/><text x="71.9016%" y="175.50"></text></g><g><title>primegen`core::iter::range::_&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::next_back (225 samples, 1.39%)</title><rect x="71.7627%" y="149" width="1.3887%" height="15" fill="rgb(217,125,39)" fg:x="11627" fg:w="225"/><text x="72.0127%" y="159.50"></text></g><g><title>primegen`&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_next_back (218 samples, 1.35%)</title><rect x="71.8059%" y="133" width="1.3455%" height="15" fill="rgb(235,36,10)" fg:x="11634" fg:w="218"/><text x="72.0559%" y="143.50"></text></g><g><title>primegen`core::num::_&lt;impl usize&gt;::unchecked_sub::precondition_check (3 samples, 0.02%)</title><rect x="73.1329%" y="117" width="0.0185%" height="15" fill="rgb(251,123,47)" fg:x="11849" fg:w="3"/><text x="73.3829%" y="127.50"></text></g><g><title>primegen`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.04%)</title><rect x="73.1515%" y="165" width="0.0432%" height="15" fill="rgb(221,13,13)" fg:x="11852" fg:w="7"/><text x="73.4015%" y="175.50"></text></g><g><title>primegen`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (801 samples, 4.94%)</title><rect x="73.1947%" y="165" width="4.9438%" height="15" fill="rgb(238,131,9)" fg:x="11859" fg:w="801"/><text x="73.4447%" y="175.50">primeg..</text></g><g><title>primegen`alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (4 samples, 0.02%)</title><rect x="78.1508%" y="117" width="0.0247%" height="15" fill="rgb(211,50,8)" fg:x="12662" fg:w="4"/><text x="78.4008%" y="127.50"></text></g><g><title>primegen`&lt;primegen::bigint::BigInt as core::clone::Clone&gt;::clone (9 samples, 0.06%)</title><rect x="78.1385%" y="165" width="0.0555%" height="15" fill="rgb(245,182,24)" fg:x="12660" fg:w="9"/><text x="78.3885%" y="175.50"></text></g><g><title>primegen`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.06%)</title><rect x="78.1385%" y="149" width="0.0555%" height="15" fill="rgb(242,14,37)" fg:x="12660" fg:w="9"/><text x="78.3885%" y="159.50"></text></g><g><title>primegen`&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (7 samples, 0.04%)</title><rect x="78.1508%" y="133" width="0.0432%" height="15" fill="rgb(246,228,12)" fg:x="12662" fg:w="7"/><text x="78.4008%" y="143.50"></text></g><g><title>primegen`core::intrinsics::copy_nonoverlapping::precondition_check (3 samples, 0.02%)</title><rect x="78.1755%" y="117" width="0.0185%" height="15" fill="rgb(213,55,15)" fg:x="12666" fg:w="3"/><text x="78.4255%" y="127.50"></text></g><g><title>primegen`DYLD-STUB$$memcpy (14 samples, 0.09%)</title><rect x="78.1941%" y="165" width="0.0864%" height="15" fill="rgb(209,9,3)" fg:x="12669" fg:w="14"/><text x="78.4441%" y="175.50"></text></g><g><title>primegen`alloc::vec::Vec&lt;T,A&gt;::len (99 samples, 0.61%)</title><rect x="78.2805%" y="165" width="0.6110%" height="15" fill="rgb(230,59,30)" fg:x="12683" fg:w="99"/><text x="78.5305%" y="175.50"></text></g><g><title>primegen`alloc::vec::Vec&lt;T,A&gt;::push (200 samples, 1.23%)</title><rect x="78.8915%" y="165" width="1.2344%" height="15" fill="rgb(209,121,21)" fg:x="12782" fg:w="200"/><text x="79.1415%" y="175.50"></text></g><g><title>primegen`alloc::vec::from_elem (5 samples, 0.03%)</title><rect x="80.1259%" y="165" width="0.0309%" height="15" fill="rgb(220,109,13)" fg:x="12982" fg:w="5"/><text x="80.3759%" y="175.50"></text></g><g><title>primegen`core::cmp::impls::_&lt;impl core::cmp::Ord for u64&gt;::cmp (39 samples, 0.24%)</title><rect x="80.1629%" y="165" width="0.2407%" height="15" fill="rgb(232,18,1)" fg:x="12988" fg:w="39"/><text x="80.4129%" y="175.50"></text></g><g><title>primegen`core::cmp::impls::_&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (6 samples, 0.04%)</title><rect x="80.4098%" y="165" width="0.0370%" height="15" fill="rgb(215,41,42)" fg:x="13028" fg:w="6"/><text x="80.6598%" y="175.50"></text></g><g><title>primegen`core::iter::range::_&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::next_back (4 samples, 0.02%)</title><rect x="80.4469%" y="165" width="0.0247%" height="15" fill="rgb(224,123,36)" fg:x="13034" fg:w="4"/><text x="80.6969%" y="175.50"></text></g><g><title>primegen`core::iter::traits::iterator::Iterator::enumerate (15 samples, 0.09%)</title><rect x="80.4715%" y="165" width="0.0926%" height="15" fill="rgb(240,125,3)" fg:x="13038" fg:w="15"/><text x="80.7215%" y="175.50"></text></g><g><title>primegen`core::iter::traits::iterator::Iterator::rev (41 samples, 0.25%)</title><rect x="80.5641%" y="165" width="0.2531%" height="15" fill="rgb(205,98,50)" fg:x="13053" fg:w="41"/><text x="80.8141%" y="175.50"></text></g><g><title>primegen`core::option::Option&lt;&amp;T&gt;::copied (276 samples, 1.70%)</title><rect x="80.8172%" y="165" width="1.7035%" height="15" fill="rgb(205,185,37)" fg:x="13094" fg:w="276"/><text x="81.0672%" y="175.50"></text></g><g><title>primegen`core::option::Option&lt;T&gt;::unwrap_or (264 samples, 1.63%)</title><rect x="82.5207%" y="165" width="1.6294%" height="15" fill="rgb(238,207,15)" fg:x="13370" fg:w="264"/><text x="82.7707%" y="175.50"></text></g><g><title>primegen`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u64&gt;&gt; (4 samples, 0.02%)</title><rect x="84.1501%" y="165" width="0.0247%" height="15" fill="rgb(213,199,42)" fg:x="13634" fg:w="4"/><text x="84.4001%" y="175.50"></text></g><g><title>primegen`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 0.26%)</title><rect x="84.2735%" y="149" width="0.2592%" height="15" fill="rgb(235,201,11)" fg:x="13654" fg:w="42"/><text x="84.5235%" y="159.50"></text></g><g><title>primegen`core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u64&gt;&gt; (3 samples, 0.02%)</title><rect x="84.5328%" y="149" width="0.0185%" height="15" fill="rgb(207,46,11)" fg:x="13696" fg:w="3"/><text x="84.7828%" y="159.50"></text></g><g><title>primegen`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.05%)</title><rect x="84.6377%" y="133" width="0.0494%" height="15" fill="rgb(241,35,35)" fg:x="13713" fg:w="8"/><text x="84.8877%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_free (66 samples, 0.41%)</title><rect x="84.7488%" y="117" width="0.4074%" height="15" fill="rgb(243,32,47)" fg:x="13731" fg:w="66"/><text x="84.9988%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (22 samples, 0.14%)</title><rect x="85.1562%" y="117" width="0.1358%" height="15" fill="rgb(247,202,23)" fg:x="13797" fg:w="22"/><text x="85.4062%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.02%)</title><rect x="85.2919%" y="117" width="0.0247%" height="15" fill="rgb(219,102,11)" fg:x="13819" fg:w="4"/><text x="85.5419%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (6 samples, 0.04%)</title><rect x="85.4648%" y="101" width="0.0370%" height="15" fill="rgb(243,110,44)" fg:x="13847" fg:w="6"/><text x="85.7148%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (195 samples, 1.20%)</title><rect x="85.5018%" y="101" width="1.2036%" height="15" fill="rgb(222,74,54)" fg:x="13853" fg:w="195"/><text x="85.7518%" y="111.50"></text></g><g><title>libsystem_platform.dylib`__bzero (13 samples, 0.08%)</title><rect x="86.7053%" y="101" width="0.0802%" height="15" fill="rgb(216,99,12)" fg:x="14048" fg:w="13"/><text x="86.9553%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (23 samples, 0.14%)</title><rect x="86.7856%" y="101" width="0.1420%" height="15" fill="rgb(226,22,26)" fg:x="14061" fg:w="23"/><text x="87.0356%" y="111.50"></text></g><g><title>primegen`__rdl_dealloc (3 samples, 0.02%)</title><rect x="86.9275%" y="101" width="0.0185%" height="15" fill="rgb(217,163,10)" fg:x="14084" fg:w="3"/><text x="87.1775%" y="111.50"></text></g><g><title>primegen`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (266 samples, 1.64%)</title><rect x="85.3166%" y="117" width="1.6418%" height="15" fill="rgb(213,25,53)" fg:x="13823" fg:w="266"/><text x="85.5666%" y="127.50"></text></g><g><title>primegen`alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (2 samples, 0.01%)</title><rect x="86.9461%" y="101" width="0.0123%" height="15" fill="rgb(252,105,26)" fg:x="14087" fg:w="2"/><text x="87.1961%" y="111.50"></text></g><g><title>primegen`DYLD-STUB$$free (44 samples, 0.27%)</title><rect x="86.9584%" y="117" width="0.2716%" height="15" fill="rgb(220,39,43)" fg:x="14089" fg:w="44"/><text x="87.2084%" y="127.50"></text></g><g><title>primegen`__rdl_dealloc (9 samples, 0.06%)</title><rect x="87.2300%" y="117" width="0.0555%" height="15" fill="rgb(229,68,48)" fg:x="14133" fg:w="9"/><text x="87.4800%" y="127.50"></text></g><g><title>primegen`core::ptr::drop_in_place&lt;primegen::bigint::BigInt&gt; (529 samples, 3.27%)</title><rect x="84.1748%" y="165" width="3.2650%" height="15" fill="rgb(252,8,32)" fg:x="13638" fg:w="529"/><text x="84.4248%" y="175.50">pri..</text></g><g><title>primegen`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u64&gt;&gt; (468 samples, 2.89%)</title><rect x="84.5513%" y="149" width="2.8885%" height="15" fill="rgb(223,20,43)" fg:x="13699" fg:w="468"/><text x="84.8013%" y="159.50">pr..</text></g><g><title>primegen`core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u64&gt;&gt; (446 samples, 2.75%)</title><rect x="84.6871%" y="133" width="2.7527%" height="15" fill="rgb(229,81,49)" fg:x="13721" fg:w="446"/><text x="84.9371%" y="143.50">pr..</text></g><g><title>primegen`alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (24 samples, 0.15%)</title><rect x="87.2917%" y="117" width="0.1481%" height="15" fill="rgb(236,28,36)" fg:x="14143" fg:w="24"/><text x="87.5417%" y="127.50"></text></g><g><title>primegen`core::slice::_&lt;impl [T]&gt;::get (21 samples, 0.13%)</title><rect x="87.4398%" y="165" width="0.1296%" height="15" fill="rgb(249,185,26)" fg:x="14167" fg:w="21"/><text x="87.6898%" y="175.50"></text></g><g><title>primegen`core::slice::_&lt;impl [T]&gt;::iter (4 samples, 0.02%)</title><rect x="87.5694%" y="165" width="0.0247%" height="15" fill="rgb(249,174,33)" fg:x="14188" fg:w="4"/><text x="87.8194%" y="175.50"></text></g><g><title>primegen`core::slice::_&lt;impl [T]&gt;::last (10 samples, 0.06%)</title><rect x="87.5941%" y="165" width="0.0617%" height="15" fill="rgb(233,201,37)" fg:x="14192" fg:w="10"/><text x="87.8441%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (113 samples, 0.70%)</title><rect x="88.7853%" y="149" width="0.6974%" height="15" fill="rgb(221,78,26)" fg:x="14385" fg:w="113"/><text x="89.0353%" y="159.50"></text></g><g><title>primegen`&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (100 samples, 0.62%)</title><rect x="89.4828%" y="149" width="0.6172%" height="15" fill="rgb(250,127,30)" fg:x="14498" fg:w="100"/><text x="89.7328%" y="159.50"></text></g><g><title>primegen`alloc::vec::Vec&lt;T,A&gt;::as_slice (322 samples, 1.99%)</title><rect x="90.1987%" y="133" width="1.9874%" height="15" fill="rgb(230,49,44)" fg:x="14614" fg:w="322"/><text x="90.4487%" y="143.50">p..</text></g><g><title>primegen`core::slice::raw::from_raw_parts::precondition_check (253 samples, 1.56%)</title><rect x="90.6246%" y="117" width="1.5615%" height="15" fill="rgb(229,67,23)" fg:x="14683" fg:w="253"/><text x="90.8746%" y="127.50"></text></g><g><title>primegen`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (355 samples, 2.19%)</title><rect x="90.1000%" y="149" width="2.1911%" height="15" fill="rgb(249,83,47)" fg:x="14598" fg:w="355"/><text x="90.3500%" y="159.50">p..</text></g><g><title>primegen`core::slice::raw::from_raw_parts::precondition_check (17 samples, 0.10%)</title><rect x="92.1861%" y="133" width="0.1049%" height="15" fill="rgb(215,43,3)" fg:x="14936" fg:w="17"/><text x="92.4361%" y="143.50"></text></g><g><title>primegen`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (41 samples, 0.25%)</title><rect x="93.1984%" y="133" width="0.2531%" height="15" fill="rgb(238,154,13)" fg:x="15100" fg:w="41"/><text x="93.4484%" y="143.50"></text></g><g><title>primegen`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (330 samples, 2.04%)</title><rect x="92.2911%" y="149" width="2.0368%" height="15" fill="rgb(219,56,2)" fg:x="14953" fg:w="330"/><text x="92.5411%" y="159.50">p..</text></g><g><title>primegen`core::slice::raw::from_raw_parts::precondition_check (142 samples, 0.88%)</title><rect x="93.4514%" y="133" width="0.8764%" height="15" fill="rgb(233,0,4)" fg:x="15141" fg:w="142"/><text x="93.7014%" y="143.50"></text></g><g><title>primegen`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (21 samples, 0.13%)</title><rect x="94.3279%" y="149" width="0.1296%" height="15" fill="rgb(235,30,7)" fg:x="15283" fg:w="21"/><text x="94.5779%" y="159.50"></text></g><g><title>primegen`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (8 samples, 0.05%)</title><rect x="94.4575%" y="149" width="0.0494%" height="15" fill="rgb(250,79,13)" fg:x="15304" fg:w="8"/><text x="94.7075%" y="159.50"></text></g><g><title>primegen`&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 0.19%)</title><rect x="94.5315%" y="133" width="0.1913%" height="15" fill="rgb(211,146,34)" fg:x="15316" fg:w="31"/><text x="94.7815%" y="143.50"></text></g><g><title>primegen`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (335 samples, 2.07%)</title><rect x="95.0932%" y="101" width="2.0676%" height="15" fill="rgb(228,22,38)" fg:x="15407" fg:w="335"/><text x="95.3432%" y="111.50">p..</text></g><g><title>primegen`core::num::_&lt;impl isize&gt;::unchecked_neg::precondition_check (62 samples, 0.38%)</title><rect x="96.7782%" y="85" width="0.3827%" height="15" fill="rgb(235,168,5)" fg:x="15680" fg:w="62"/><text x="97.0282%" y="95.50"></text></g><g><title>primegen`&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (364 samples, 2.25%)</title><rect x="95.0253%" y="117" width="2.2466%" height="15" fill="rgb(221,155,16)" fg:x="15396" fg:w="364"/><text x="95.2753%" y="127.50">p..</text></g><g><title>primegen`core::num::_&lt;impl isize&gt;::unchecked_neg::precondition_check (18 samples, 0.11%)</title><rect x="97.1608%" y="101" width="0.1111%" height="15" fill="rgb(215,215,53)" fg:x="15742" fg:w="18"/><text x="97.4108%" y="111.50"></text></g><g><title>primegen`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (461 samples, 2.85%)</title><rect x="94.5069%" y="149" width="2.8453%" height="15" fill="rgb(223,4,10)" fg:x="15312" fg:w="461"/><text x="94.7569%" y="159.50">pr..</text></g><g><title>primegen`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (426 samples, 2.63%)</title><rect x="94.7229%" y="133" width="2.6293%" height="15" fill="rgb(234,103,6)" fg:x="15347" fg:w="426"/><text x="94.9729%" y="143.50">pr..</text></g><g><title>primegen`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (13 samples, 0.08%)</title><rect x="97.2719%" y="117" width="0.0802%" height="15" fill="rgb(227,97,0)" fg:x="15760" fg:w="13"/><text x="97.5219%" y="127.50"></text></g><g><title>primegen`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (9 samples, 0.06%)</title><rect x="97.3522%" y="149" width="0.0555%" height="15" fill="rgb(234,150,53)" fg:x="15773" fg:w="9"/><text x="97.6022%" y="159.50"></text></g><g><title>primegen`DYLD-STUB$$memcpy (12 samples, 0.07%)</title><rect x="97.4077%" y="149" width="0.0741%" height="15" fill="rgb(228,201,54)" fg:x="15782" fg:w="12"/><text x="97.6577%" y="159.50"></text></g><g><title>primegen`alloc::vec::Vec&lt;T,A&gt;::as_slice (19 samples, 0.12%)</title><rect x="97.4818%" y="149" width="0.1173%" height="15" fill="rgb(222,22,37)" fg:x="15794" fg:w="19"/><text x="97.7318%" y="159.50"></text></g><g><title>primegen`core::iter::traits::iterator::Iterator::zip (151 samples, 0.93%)</title><rect x="97.5991%" y="149" width="0.9320%" height="15" fill="rgb(237,53,32)" fg:x="15813" fg:w="151"/><text x="97.8491%" y="159.50"></text></g><g><title>primegen`core::slice::_&lt;impl [T]&gt;::iter (18 samples, 0.11%)</title><rect x="98.5310%" y="149" width="0.1111%" height="15" fill="rgb(233,25,53)" fg:x="15964" fg:w="18"/><text x="98.7810%" y="159.50"></text></g><g><title>primegen`core::slice::iter::Iter&lt;T&gt;::new (142 samples, 0.88%)</title><rect x="98.6421%" y="149" width="0.8764%" height="15" fill="rgb(210,40,34)" fg:x="15982" fg:w="142"/><text x="98.8921%" y="159.50"></text></g><g><title>primegen`&lt;&amp;primegen::bigint::BigInt as core::ops::arith::Rem&gt;::rem (15,973 samples, 98.59%)</title><rect x="0.9567%" y="181" width="98.5866%" height="15" fill="rgb(241,220,44)" fg:x="155" fg:w="15973"/><text x="1.2067%" y="191.50">primegen`&lt;&amp;primegen::bigint::BigInt as core::ops::arith::Rem&gt;::rem</text></g><g><title>primegen`primegen::bigint::BigInt::cmp_bigint (1,925 samples, 11.88%)</title><rect x="87.6620%" y="165" width="11.8812%" height="15" fill="rgb(235,28,35)" fg:x="14203" fg:w="1925"/><text x="87.9120%" y="175.50">primegen`primegen:..</text></g><g><title>primegen`core::slice::raw::from_raw_parts::precondition_check (4 samples, 0.02%)</title><rect x="99.5186%" y="149" width="0.0247%" height="15" fill="rgb(210,56,17)" fg:x="16124" fg:w="4"/><text x="99.7686%" y="159.50"></text></g><g><title>primegen`&lt;&amp;primegen::bigint::BigInt as core::ops::arith::Sub&lt;&amp;primegen::bigint::BigInt&gt;&gt;::sub (12 samples, 0.07%)</title><rect x="99.5433%" y="181" width="0.0741%" height="15" fill="rgb(224,130,29)" fg:x="16128" fg:w="12"/><text x="99.7933%" y="191.50"></text></g><g><title>primegen`&lt;&amp;primegen::bigint::BigInt as core::ops::bit::Shl&lt;usize&gt;&gt;::shl (12 samples, 0.07%)</title><rect x="99.6173%" y="181" width="0.0741%" height="15" fill="rgb(235,212,8)" fg:x="16140" fg:w="12"/><text x="99.8673%" y="191.50"></text></g><g><title>primegen`&lt;primegen::bigint::BigInt as core::ops::bit::ShrAssign&lt;u32&gt;&gt;::shr_assign (5 samples, 0.03%)</title><rect x="99.7099%" y="181" width="0.0309%" height="15" fill="rgb(223,33,50)" fg:x="16155" fg:w="5"/><text x="99.9599%" y="191.50"></text></g><g><title>primegen`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 0.01%)</title><rect x="99.7284%" y="165" width="0.0123%" height="15" fill="rgb(219,149,13)" fg:x="16158" fg:w="2"/><text x="99.9784%" y="175.50"></text></g><g><title>primegen`core::cmp::PartialEq::ne (2 samples, 0.01%)</title><rect x="99.7408%" y="181" width="0.0123%" height="15" fill="rgb(250,156,29)" fg:x="16160" fg:w="2"/><text x="99.9908%" y="191.50"></text></g><g><title>primegen`core::ptr::drop_in_place&lt;primegen::bigint::BigInt&gt; (8 samples, 0.05%)</title><rect x="99.7593%" y="181" width="0.0494%" height="15" fill="rgb(216,193,19)" fg:x="16163" fg:w="8"/><text x="100.0093%" y="191.50"></text></g><g><title>primegen`primegen::bigint::BigInt::modpow (16,181 samples, 99.87%)</title><rect x="0.0000%" y="197" width="99.8704%" height="15" fill="rgb(216,135,14)" fg:x="0" fg:w="16181"/><text x="0.2500%" y="207.50">primegen`primegen::bigint::BigInt::modpow</text></g><g><title>primegen`primegen::bigint::BigInt::cmp_bigint (10 samples, 0.06%)</title><rect x="99.8087%" y="181" width="0.0617%" height="15" fill="rgb(241,47,5)" fg:x="16171" fg:w="10"/><text x="100.0587%" y="191.50"></text></g><g><title>primegen`&lt;&amp;primegen::bigint::BigInt as core::ops::arith::Mul&gt;::mul (2 samples, 0.01%)</title><rect x="99.8704%" y="165" width="0.0123%" height="15" fill="rgb(233,42,35)" fg:x="16181" fg:w="2"/><text x="100.1204%" y="175.50"></text></g><g><title>primegen`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="99.9074%" y="133" width="0.0123%" height="15" fill="rgb(231,13,6)" fg:x="16187" fg:w="2"/><text x="100.1574%" y="143.50"></text></g><g><title>primegen`alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.01%)</title><rect x="99.9198%" y="133" width="0.0123%" height="15" fill="rgb(207,181,40)" fg:x="16189" fg:w="2"/><text x="100.1698%" y="143.50"></text></g><g><title>primegen`alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2 samples, 0.01%)</title><rect x="99.9198%" y="117" width="0.0123%" height="15" fill="rgb(254,173,49)" fg:x="16189" fg:w="2"/><text x="100.1698%" y="127.50"></text></g><g><title>primegen`&lt;&amp;primegen::bigint::BigInt as core::ops::arith::Sub&lt;&amp;primegen::bigint::BigInt&gt;&gt;::sub (11 samples, 0.07%)</title><rect x="99.8827%" y="149" width="0.0679%" height="15" fill="rgb(221,1,38)" fg:x="16183" fg:w="11"/><text x="100.1327%" y="159.50"></text></g><g><title>primegen`core::cmp::impls::_&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (3 samples, 0.02%)</title><rect x="99.9321%" y="133" width="0.0185%" height="15" fill="rgb(206,124,46)" fg:x="16191" fg:w="3"/><text x="100.1821%" y="143.50"></text></g><g><title>primegen`core::cmp::PartialOrd::ge (3 samples, 0.02%)</title><rect x="99.9321%" y="117" width="0.0185%" height="15" fill="rgb(249,21,11)" fg:x="16191" fg:w="3"/><text x="100.1821%" y="127.50"></text></g><g><title>primegen`&lt;primegen::bigint::BigInt as core::cmp::PartialOrd&gt;::partial_cmp (2 samples, 0.01%)</title><rect x="99.9383%" y="101" width="0.0123%" height="15" fill="rgb(222,201,40)" fg:x="16192" fg:w="2"/><text x="100.1883%" y="111.50"></text></g><g><title>primegen`&lt;&amp;primegen::bigint::BigInt as core::ops::bit::Shl&lt;usize&gt;&gt;::shl (3 samples, 0.02%)</title><rect x="99.9506%" y="149" width="0.0185%" height="15" fill="rgb(235,61,29)" fg:x="16194" fg:w="3"/><text x="100.2006%" y="159.50"></text></g><g><title>primegen`primegen::bigint::BigInt::modpow_u32 (20 samples, 0.12%)</title><rect x="99.8704%" y="197" width="0.1234%" height="15" fill="rgb(219,207,3)" fg:x="16181" fg:w="20"/><text x="100.1204%" y="207.50"></text></g><g><title>primegen`primegen::bigint::BigInt::modpow (20 samples, 0.12%)</title><rect x="99.8704%" y="181" width="0.1234%" height="15" fill="rgb(222,56,46)" fg:x="16181" fg:w="20"/><text x="100.1204%" y="191.50"></text></g><g><title>primegen`&lt;&amp;primegen::bigint::BigInt as core::ops::arith::Rem&gt;::rem (18 samples, 0.11%)</title><rect x="99.8827%" y="165" width="0.1111%" height="15" fill="rgb(239,76,54)" fg:x="16183" fg:w="18"/><text x="100.1327%" y="175.50"></text></g><g><title>primegen`primegen::bigint::BigInt::cmp_bigint (3 samples, 0.02%)</title><rect x="99.9753%" y="149" width="0.0185%" height="15" fill="rgb(231,124,27)" fg:x="16198" fg:w="3"/><text x="100.2253%" y="159.50"></text></g><g><title>primegen`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="99.9815%" y="133" width="0.0123%" height="15" fill="rgb(249,195,6)" fg:x="16199" fg:w="2"/><text x="100.2315%" y="143.50"></text></g><g><title>primegen`&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (2 samples, 0.01%)</title><rect x="99.9815%" y="117" width="0.0123%" height="15" fill="rgb(237,174,47)" fg:x="16199" fg:w="2"/><text x="100.2315%" y="127.50"></text></g><g><title>primegen`&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="99.9815%" y="101" width="0.0123%" height="15" fill="rgb(206,201,31)" fg:x="16199" fg:w="2"/><text x="100.2315%" y="111.50"></text></g><g><title>primegen`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (2 samples, 0.01%)</title><rect x="99.9815%" y="85" width="0.0123%" height="15" fill="rgb(231,57,52)" fg:x="16199" fg:w="2"/><text x="100.2315%" y="95.50"></text></g><g><title>all (16,202 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(248,177,22)" fg:x="0" fg:w="16202"/><text x="0.2500%" y="383.50"></text></g><g><title>dyld`start (16,202 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(215,211,37)" fg:x="0" fg:w="16202"/><text x="0.2500%" y="367.50">dyld`start</text></g><g><title>primegen`main (16,202 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(241,128,51)" fg:x="0" fg:w="16202"/><text x="0.2500%" y="351.50">primegen`main</text></g><g><title>primegen`std::rt::lang_start (16,202 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(227,165,31)" fg:x="0" fg:w="16202"/><text x="0.2500%" y="335.50">primegen`std::rt::lang_start</text></g><g><title>primegen`std::rt::lang_start_internal (16,202 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(228,167,24)" fg:x="0" fg:w="16202"/><text x="0.2500%" y="319.50">primegen`std::rt::lang_start_internal</text></g><g><title>primegen`std::rt::lang_start::_{{closure}} (16,202 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(228,143,12)" fg:x="0" fg:w="16202"/><text x="0.2500%" y="303.50">primegen`std::rt::lang_start::_{{closure}}</text></g><g><title>primegen`std::sys::backtrace::__rust_begin_short_backtrace (16,202 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(249,149,8)" fg:x="0" fg:w="16202"/><text x="0.2500%" y="287.50">primegen`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>primegen`core::ops::function::FnOnce::call_once (16,202 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(243,35,44)" fg:x="0" fg:w="16202"/><text x="0.2500%" y="271.50">primegen`core::ops::function::FnOnce::call_once</text></g><g><title>primegen`primegen::main (16,202 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(246,89,9)" fg:x="0" fg:w="16202"/><text x="0.2500%" y="255.50">primegen`primegen::main</text></g><g><title>primegen`primegen::generate_prime (16,202 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(233,213,13)" fg:x="0" fg:w="16202"/><text x="0.2500%" y="239.50">primegen`primegen::generate_prime</text></g><g><title>primegen`primegen::miller_rabin (16,202 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(233,141,41)" fg:x="0" fg:w="16202"/><text x="0.2500%" y="223.50">primegen`primegen::miller_rabin</text></g></svg></svg>